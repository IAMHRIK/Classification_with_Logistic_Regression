{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "Tdnk3omA8Eu-",
      "metadata": {
        "id": "Tdnk3omA8Eu-"
      },
      "outputs": [],
      "source": [
        "!pip install scikit-learn pandas matplotlib numpy --quiet"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "y3A_XmDz8pX6",
      "metadata": {
        "id": "y3A_XmDz8pX6"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import load_breast_cancer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import (\n",
        "    confusion_matrix, classification_report,\n",
        "    precision_score, recall_score, roc_auc_score,\n",
        "    roc_curve, precision_recall_curve\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "wyZ_vxaP830-",
      "metadata": {
        "id": "wyZ_vxaP830-"
      },
      "outputs": [],
      "source": [
        "\n",
        "data = load_breast_cancer()\n",
        "X = pd.DataFrame(data.data, columns=data.feature_names)\n",
        "y = pd.Series(data.target)\n",
        "\n",
        "print(\"Dataset shape:\", X.shape)\n",
        "print(\"\\nFirst 5 rows:\")\n",
        "display(X.head())\n",
        "print(\"\\nTarget distribution (0: Malignant, 1: Benign):\")\n",
        "print(y.value_counts())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "EoS1oojn9Khm",
      "metadata": {
        "id": "EoS1oojn9Khm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3579af84-e5b2-44f5-bd0e-e787aed6f87a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set shape: (398, 30)\n",
            "Test set shape: (171, 30)\n"
          ]
        }
      ],
      "source": [
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "print(\"Training set shape:\", X_train_scaled.shape)\n",
        "print(\"Test set shape:\", X_test_scaled.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "nq7XQNDb_c6i",
      "metadata": {
        "id": "nq7XQNDb_c6i"
      },
      "outputs": [],
      "source": [
        "\n",
        "model = LogisticRegression(random_state=42, max_iter=1000)\n",
        "model.fit(X_train_scaled, y_train)\n",
        "\n",
        "y_pred = model.predict(X_test_scaled)\n",
        "y_pred_proba = model.predict_proba(X_test_scaled)[:, 1]  # Probabilities for class 1 (Benign)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8bV9qJrp-ZHm",
      "metadata": {
        "id": "8bV9qJrp-ZHm"
      },
      "outputs": [],
      "source": [
        "\n",
        "print(\"Confusion Matrix:\")\n",
        "print(confusion_matrix(y_test, y_pred))\n",
        "\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred))\n",
        "\n",
        "print(f\"\\nPrecision: {precision_score(y_test, y_pred):.4f}\")\n",
        "print(f\"Recall: {recall_score(y_test, y_pred):.4f}\")\n",
        "print(f\"ROC-AUC Score: {roc_auc_score(y_test, y_pred_proba):.4f}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "yJQEce1V-hps",
      "metadata": {
        "id": "yJQEce1V-hps"
      },
      "outputs": [],
      "source": [
        "fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(fpr, tpr, label=f'Logistic Regression (AUC = {roc_auc_score(y_test, y_pred_proba):.2f})')\n",
        "plt.plot([0, 1], [0, 1], 'k--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('ROC Curve')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5xXj-8NKAXIq",
      "metadata": {
        "id": "5xXj-8NKAXIq"
      },
      "outputs": [],
      "source": [
        "precision, recall, thresholds = precision_recall_curve(y_test, y_pred_proba)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(recall, precision, label='Logistic Regression')\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.title('Precision-Recall Curve')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "uff_yW9n7jAV",
      "metadata": {
        "id": "uff_yW9n7jAV"
      },
      "outputs": [],
      "source": [
        "x_sigmoid = np.linspace(-10, 10, 100)\n",
        "y_sigmoid = 1 / (1 + np.exp(-x_sigmoid))\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(x_sigmoid, y_sigmoid)\n",
        "plt.title('Sigmoid Function (Logistic Function)')\n",
        "plt.xlabel('Input (z)')\n",
        "plt.ylabel('Probability (Ïƒ(z))')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "uVEk0jws7j5a",
      "metadata": {
        "id": "uVEk0jws7j5a"
      },
      "outputs": [],
      "source": [
        "\n",
        "thresholds = np.arange(0.1, 1.0, 0.1)\n",
        "for threshold in thresholds:\n",
        "    y_pred_threshold = (y_pred_proba >= threshold).astype(int)\n",
        "    print(f\"\\nThreshold: {threshold:.1f}\")\n",
        "    print(f\"Precision: {precision_score(y_test, y_pred_threshold):.4f}\")\n",
        "    print(f\"Recall: {recall_score(y_test, y_pred_threshold):.4f}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8fCBzKZl7kmm",
      "metadata": {
        "id": "8fCBzKZl7kmm"
      },
      "outputs": [],
      "source": [
        "optimal_threshold = 0.4\n",
        "y_pred_optimal = (y_pred_proba >= optimal_threshold).astype(int)\n",
        "\n",
        "print(\"\\nFinal Evaluation with Optimal Threshold (0.4):\")\n",
        "print(classification_report(y_test, y_pred_optimal))"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}